create table "public"."user_details" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "lemon_squeezy_id" text,
    "user_id" uuid,
    "email" text,
    "subscription_package" text,
    "subscription_status" text,
    "subscription_renews_at" timestamp with time zone,
    "lemon_squeezy_subscription_id" text
);


alter table "public"."user_details" enable row level security;

CREATE UNIQUE INDEX user_details_email_key ON public.user_details USING btree (email);

CREATE UNIQUE INDEX user_details_pkey ON public.user_details USING btree (id);

alter table "public"."user_details" add constraint "user_details_pkey" PRIMARY KEY using index "user_details_pkey";

alter table "public"."user_details" add constraint "user_details_email_key" UNIQUE using index "user_details_email_key";

alter table "public"."user_details" add constraint "user_details_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_details" validate constraint "user_details_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.user_details (user_id, email)
  values (new.id, new.email);
  return new;
end;
$function$
;

create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


